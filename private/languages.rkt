#lang racket/base

(provide (all-defined-out))
(require nanopass/base
         racket/bool
         (only-in compiler/zo-structs stx?)
         "utils.rkt")

(define-language Lsrc
  (terminals
   (maybe-module-path (maybe-module-path module-path))
   (declaration-keyword (declaration-keyword))
   (datum (datum))
   (symbol (id))
   (variable (v var variable))
   (string (string))
   (path (path))
   (phase-level (phase-level))
   (false (false))
   (exact-nonnegative-integer (exact-nonnegative-integer eni))
   (syntax (syntax-object))
   (boolean (boolean)))
  (top-level-form (top-level-form)
                  general-top-level-form
                  (#%expression expr)
                  (module id module-path
                    (module-level-form ...))
                  (begin* top-level-form ...)
                  (begin-for-syntax* top-level-form ...))
  (module-level-form (module-level-form)
                     general-top-level-form
                     (#%provide raw-provide-spec ...)
                     (begin-for-syntax module-level-form ...)
                     submodule-form
                     (#%declare declaration-keyword ...))
  (submodule-form (submodule-form)
                  (submodule id module-path
                             (module-level-form ...))
                  (submodule* id module-path
                              (module-level-form ...)))
  (general-top-level-form (general-top-level-form)
                          expr
                          (define-values (v ...) expr)
                          (define-syntaxes (v ...) expr)
                          (#%require raw-require-spec ...))
  (expr (expr)
        v
        (primitive id)
        (#%plain-lambda formals expr* ... expr)
        (case-lambda (formals expr* ... expr) ...)
        (if expr1 expr2 expr3)
        (begin expr* ... expr)
        (begin0 expr expr* ...)
        (let-values ([(v ...) expr1] ...)
          expr* ... expr)
        (letrec-values ([(v ...) expr1] ...)
          expr* ... expr)
        (set! v expr)
        (quote datum)
        (quote-syntax syntax-object)
        (quote-syntax-local syntax-object)
        (with-continuation-mark expr1 expr2 expr3)
        (#%plain-app expr expr* ...)
        (#%top . v)
        (#%variable-reference v)
        (#%variable-reference-top v)
        (#%variable-reference))
  (formals (formals)
           v
           (v ...)
           (v v* ... . v2))
  (raw-require-spec (raw-require-spec rrs)
                    phaseless-req-spec
                    (for-meta phase-level phaseless-req-spec ...)
                    (just-meta phase-level raw-require-spec ...))
  (phaseless-req-spec (phaseless-req-spec)
                      raw-module-path
                      (only raw-module-path v ...)
                      (all-except raw-module-path v ...)
                      (prefix-all-except id raw-module-path v* ...)
                      (rename raw-module-path v1 v2))
  (raw-module-path (raw-module-path)
                   raw-root-module-path
                   (submod raw-root-module-path id ...))
  (raw-root-module-path (raw-root-module-path)
                        id
                        string
                        (quote* id)
                        (lib string ...)
                        (file string)
                        (planet string1
                                (string2 string3 string* ...))
                        path)
  (raw-provide-spec (raw-provide-spec rps)
                    phaseless-prov-spec
                    (for-meta* phase-level phaseless-prov-spec)
                    (protect raw-provide-spec))
  (phaseless-prov-spec (phaseless-prov-spec)
                       v
                       (rename* v1 v2)
                       (struct v (v* ...))
                       (all-from-except raw-module-path v ...)
                       (all-defined-except v ...)
                       (prefix-all-defined-except id v* ...)
                       (protect* phaseless-prov-spec ...)))

(define-language Lsubmodules
  (extends Lsrc)
  (top-level-form (top-level-form)
                  (- (module id module-path
                       (module-level-form ...)))
                  (+ submodule-form))
  (module-level-form (module-level-form)
                     (- submodule-form))
  (submodule-form (submodule-form)
                  (- (submodule id module-path
                                (module-level-form ...))
                     (submodule* id module-path
                                 (module-level-form ...)))
                  (+ (module id module-path
                       (module-level-form ...)
                       (submodule-form ...)
                       (submodule-form* ...)))))

(define-language Lreqprov
  (extends Lsubmodules)
  (top-level-form (top-level-form)
                  (+ (#%require raw-require-spec ...)))
  (general-top-level-form (general-top-level-form)
                          (- (#%require raw-require-spec ...)))
  (module-level-form (module-level-form)
                     (- (#%provide raw-provide-spec ...)))
  (submodule-form (submodule-form)
                  (- (module id module-path
                       (module-level-form ...)
                       (submodule-form ...)
                       (submodule-form* ...)))
                  (+ (module id module-path
                       (raw-provide-spec ...)
                       (raw-require-spec ...)
                       (module-level-form ...)
                       (submodule-form ...)
                       (submodule-form* ...)))))

(define-language Lsyntax
  (extends Lreqprov)
  (submodule-form (submodule-form)
                  (- (module id module-path
                       (raw-provide-spec ...)
                       (raw-require-spec ...)
                       (module-level-form ...)
                       (submodule-form ...)
                       (submodule-form* ...)))
                 (+ (module id module-path
                       (raw-provide-spec ...)
                       (raw-require-spec ...)
                       (module-level-form ...)
                       (syntax-level-form ...)
                       (submodule-form ...)
                       (submodule-form* ...))))
  (syntax-level-form (syntax-level-form)
                     (+ (syntax eni (syntax-body ...))))
  (syntax-body (syntax-body)
               (+ (begin-for-syntax module-level-form ...)
                  (define-syntaxes (v ...) expr)))
  (module-level-form (module-level-form)
                     (- (begin-for-syntax module-level-form ...)))
  (general-top-level-form (general-top-level-form)
                          (- (define-syntaxes (v ...) expr)))
  (top-level-form (top-level-form)
                  (+ (define-syntaxes* (v ...) expr))))

(define-language Lmodulevars
  (extends Lsyntax)
  (submodule-form (submodule-form)
                  (- (module id module-path
                       (raw-provide-spec ...)
                       (raw-require-spec ...)
                       (module-level-form ...)
                       (syntax-level-form ...)
                       (submodule-form ...)
                       (submodule-form* ...)))
                  (+ (module id module-path (v* ...) (v** ...)
                       (raw-provide-spec ...)
                       (raw-require-spec ...)
                       (module-level-form ...)
                       (syntax-level-form ...)
                       (submodule-form ...)
                       (submodule-form* ...))))
  (syntax-level-form (syntax-level-form)
                     (- (syntax eni (syntax-body ...)))
                     (+ (syntax eni (v ...) (v* ...)
                                (syntax-body ...)))))

(define-language Lscrubreqprov
  (extends Lmodulevars)
  (raw-require-spec (raw-require-spec rrs)
                    (- phaseless-req-spec
                       (just-meta phase-level raw-require-spec ...)))
  (phaseless-req-spec (phaseless-req-spec)
                      (- (only raw-module-path v ...)
                         (all-except raw-module-path v ...)
                         (prefix-all-except id raw-module-path v* ...)))
  (raw-provide-spec (raw-provide-spec rps)
                    (- phaseless-prov-spec
                       (for-meta* phase-level phaseless-prov-spec)
                       (protect raw-provide-spec))
                    (+ (for-meta* phase-level phaseless-prov-spec ...)))
  (phaseless-prov-spec (phaseless-prov-spec)
                       (- (all-from-except raw-module-path v ...)
                          (all-defined-except v ...)
                          (struct v (v* ...))
                          (prefix-all-defined-except id v* ...)
                          (protect* phaseless-prov-spec ...))
                       (+ (protect v)
                          (protect-rename* v1 v2))))

(define-language Lbeginexplicit
  (extends Lscrubreqprov)
  (lambda (lambda)
    (+ (#%plain-lambda formals expr)))
  (expr (expr)
        (- (#%plain-lambda formals expr* ... expr)
           (case-lambda (formals expr* ... expr) ...)
           (let-values ([(v ...) expr1] ...)
             expr* ... expr)
           (letrec-values ([(v ...) expr1] ...)
             expr* ... expr))
        (+ lambda
           (case-lambda lambda ...)
           (let-values ([(v ...) expr1] ...)
             expr)
           (letrec-values ([(v ...) expr1] ...)
             expr))))

(define-language Lidentifyassigned
  (extends Lbeginexplicit)
   (lambda (lambda)
     (- (#%plain-lambda formals expr))
     (+ (#%plain-lambda formals abody)))
   (expr (expr)
         (- (let-values ([(v ...) expr1] ...)
              expr)
            (letrec-values ([(v ...) expr1] ...)
              expr))
         (+ (let-values ([(v ...) expr1] ...)
              abody)
            (letrec-values ([(v ...) expr1] ...)
              abody)))
   (assigned-body (abody)
                  (+ (assigned (v ...) expr))))

(define-language Lpurifyletrec
  (extends Lidentifyassigned)
  (expr (expr)
        (- (let-values ([(v ...) expr1] ...)
             abody)
           (letrec-values ([(v ...) expr1] ...)
             abody)
           (set! v expr)
           (quote datum))
        (+ set-expr
           (undefined)
           (let ([v expr1] ...)
             set-abody)
           (letrec ([v lambda] ...)
             expr)))
  (lambda (lambda)
    (+ (quote datum)))
  (set-expr (set-expr)
            (+ (set!-values (v ...) expr)))
  (set-abody (set-abody)
             (+ (begin-set! set-expr ... abody))))

(define-language Lconvertassignments
  (extends Lpurifyletrec)
  (expr (expr)
        (- set-expr
           (let ([v expr1] ...)
             set-abody))
        (+ (quote datum)
           (let ([v expr1] ...)
             expr)
           (#%unbox v)
           (#%box v)
           (set!-values (v ...) expr)
           (set!-boxes (v ...) expr)))
  (lambda (lambda)
    (- (#%plain-lambda formals abody)
       (quote datum))
    (+ (#%plain-lambda formals expr)))
  (set-abody (set-abody)
             (- (begin-set! set-expr ... abody)))
  (set-expr (set-expr)
            (- (set!-values (v ...) expr)))
  (assigned-body (abody)
                 (- (assigned (v ...) expr))))

(define-language Luncoverfree
  (extends Lconvertassignments)
  (entry compilation-top)
  (compilation-top (compilation-top)
                   (+ (program (binding ...) top-level-form)))
  (lambda (lambda)
    (- (#%plain-lambda formals expr))
    (+ (#%plain-lambda formals fbody)))
  (binding (binding)
           (+ v
              false))
  (free-body (fbody)
             (+ (free (v ...) (binding* ...) expr))))

(define-language Lraisetoplevel
  (extends Luncoverfree)
  (expr (expr)
        (+ (set!-global v expr))))

(define-language Lclosurify
  (extends Lraisetoplevel)
  (expr (expr)
        (+ (closure v lambda))))

(define-language Lvoidlets
  (extends Lclosurify)
  (expr (expr)
        (- (let ([v expr1] ...) expr)
           (undefined))
        (+ (let ([v expr1]) expr)
           (let-void (v ...) expr))))

(define-language Lscrubsyntax
  (extends Lvoidlets)
  (compilation-top (compilation-top)
                   (- (program (binding ...) top-level-form))
                   (+ (program (binding ...) (syntax-object ...) (eni ...) top-level-form)))
  (submodule-form (submodule-form)
                  (- (module id module-path (v* ...) (v** ...)
                       (raw-provide-spec ...)
                       (raw-require-spec ...)
                       (module-level-form ...)
                       (syntax-level-form ...)
                       (submodule-form ...)
                       (submodule-form* ...)))
                  (+ (module id module-path (v* ...) (v** ...) (eni ...)
                       (raw-provide-spec ...)
                       (raw-require-spec ...)
                       (module-level-form ...)
                       (syntax-level-form ...)
                       (submodule-form ...)
                       (submodule-form* ...))))
  (expr (expr)
        (- (quote-syntax syntax-object)
           (quote-syntax-local syntax-object))
        (+ (quote-syntax eni))))

(define-language Lreintroducesyntax
  (extends Lscrubsyntax)
  (terminals
   (- (syntax (syntax-object)))
   (+ (stx (stx))))
  (compilation-top (compilation-top)
                   (- (program (binding ...) (syntax-object ...) (eni ...) top-level-form))
                   (+ (program (binding ...) (stx ...) top-level-form)))
  (submodule-form (submodule-form)
                  (- (module id module-path (v* ...) (v** ...) (eni ...)
                       (raw-provide-spec ...)
                       (raw-require-spec ...)
                       (module-level-form ...)
                       (syntax-level-form ...)
                       (submodule-form ...)
                       (submodule-form* ...)))
                  (+ (module id module-path (v* ...) (v** ...) (stx ...)
                       (raw-provide-spec ...)
                       (raw-require-spec ...)
                       (module-level-form ...)
                       (syntax-level-form ...)
                       (submodule-form ...)
                       (submodule-form* ...)))))


(define-language Ldebruijn
  (extends Lreintroducesyntax)
  (expr (expr)
        (- v
           (primitive id)
           (let-void (v ...) expr)
           (let ([v expr1]) expr)
           (letrec ([v lambda] ...)
             expr)
           (set!-boxes (v ...) expr)
           (set!-values (v ...) expr)
           (set!-global v expr)
           (#%box v)
           (#%unbox v)
           (#%top . v)
           (quote-syntax eni)
           (#%variable-reference)
           (#%variable-reference v)
           (#%variable-reference-top v))
        (+ binding
           (primitive eni)
           (let-void eni expr)
           (let-one expr1 expr)
           (letrec (lambda ...)
             expr)
           (set!-boxes eni1 eni2 expr)
           (set!-values eni1 eni2 expr)
           (set!-global eni1 eni2 expr)
           (#%box eni)
           (#%unbox eni)
           (#%top eni1 eni2)
           (quote-syntax eni1 eni2)
           (#%variable-reference-none eni1 eni2)
           (#%variable-reference eni)
           (#%variable-reference-top eni)))
  (general-top-level-form (general-top-level-form)
                          (- (define-values (v ...) expr))
                          (+ (define-values (eni ...) expr)))
  (lambda (lambda)
    (- (#%plain-lambda formals fbody))
    (+ (#%plain-lambda eni1 boolean (binding2 ...) (binding3 ...) expr)))
  (binding (binding)
           (+ eni
              (primitive eni)))
  (formals (formals)
           (- v
              (v ...)
              (v v* ... . v2)))
  (free-body (fbody)
             (- (free (v ...) (binding* ...) expr))))

(define-language Lfindletdepth
  (extends Ldebruijn)
  (entry compilation-top)
  (compilation-top (compilation-top)
                   (- (program (binding ...) (stx ...) top-level-form))
                   (+ (program eni (binding ...) (stx ...) top-level-form)))
  (submodule-form (submodule-form)
                  (- (module id module-path (v* ...) (v** ...) (stx ...)
                             (raw-provide-spec ...)
                             (raw-require-spec ...)
                             (module-level-form ...)
                             (syntax-level-form ...)
                             (submodule-form ...)
                             (submodule-form* ...)))
                  (+ (module id module-path (v* ...) (v** ...) (stx ...) eni
                             (raw-provide-spec ...)
                             (raw-require-spec ...)
                             (module-level-form ...)
                             (syntax-level-form ...)
                             (submodule-form ...)
                             (submodule-form* ...))))
  (lambda (lambda)
    (- (#%plain-lambda eni1 boolean (binding2 ...) (binding3 ...) expr))
    (+ (#%plain-lambda eni1 boolean (binding2 ...) (binding3 ...) eni4 expr))))
